import java.util.*;
class Sim {

// Class Sim variables
public static double Clock, MeanIntArvTime, MeanServiceTime, SIGMA, LastEventTime, 
        TotalBusy, MaxQueueLength, SumResponseTime;
public static long  NumberOfCustomers, QueueLength, NumberInService, 
        TotalCustomers, NumberOfDepartures, LongService;

public final static int arrival = 1;
public final static int departure = 2;

public static EventList FutureEventList;
public static Queue Customers;
public static Random stream;
public static double WarmPeriodClock;
public static double IntArvTime;
public static double TotArvTime;
public static double CalServTime;
public static double TotServTime;
public static long WarmQueueCust;
public static long seed ;

public static void main(String argv[]) {

  MeanIntArvTime = 4.5; MeanServiceTime = 3.2;
  SIGMA                = 0.6; TotalCustomers  = 5000;
  seed            = Long.parseLong(argv[0]);
  System.out.println(seed);
  stream = new Random(seed);           // initialize rng stream
  FutureEventList = new EventList();
  Customers = new Queue();
  Scanner s = new Scanner (System.in);
  System.out.print("Enter the Number of warm up customers to be added in the Simulation ");
  WarmQueueCust = s.nextLong();
  Initialization();

  // Loop until first "TotalCustomers" have departed
  while(NumberOfDepartures < TotalCustomers ) {
    Event evt = (Event)FutureEventList.getMin();  // get imminent event
    FutureEventList.dequeue();                    // be rid of it
    Clock = evt.get_time();                       // advance simulation time
    if( evt.get_type() == arrival ) 
	{
        ProcessArrival(evt);
        if (NumberOfDepartures > WarmQueueCust )
		{
            TotArvTime += IntArvTime; 
        }    
    } 
    else  {
        ProcessDeparture(evt);
        if (NumberOfDepartures > WarmQueueCust )
		{
            TotServTime += CalServTime;     
        }        
    }
    }
  ReportGeneration();
 }

 // seed the event list with TotalCustomers arrivals
 public static void Initialization()   { 
  Clock = 0.0;
  QueueLength = 0;
  NumberInService = 0;
  LastEventTime = 0.0;
  TotalBusy = 0 ;
  MaxQueueLength = 0;
  SumResponseTime = 0;
  NumberOfDepartures = 0;
  LongService = 0;
  TotArvTime = 0;
  CalServTime = 0; 
  TotServTime = 0;
  IntArvTime = 0;

  // create first arrival event
  Event evt = new Event(arrival, exponential( stream, MeanIntArvTime));
  FutureEventList.enqueue( evt );
 }

 public static void ProcessArrival(Event evt) {
  Customers.enqueue(evt); 
  QueueLength++;
  // if the server is idle
  if( NumberInService == 0) ScheduleDeparture();
  else if (NumberOfDepartures > WarmQueueCust )
  {
	  TotalBusy += (Clock - LastEventTime );   // if server is busy
  } 
  
  // adjust max queue length statistics
  if (MaxQueueLength < QueueLength) MaxQueueLength = QueueLength;
  
  // store the inter-arrival time generated by the exponential distribution.
  IntArvTime = exponential(stream, MeanIntArvTime);
  
  // schedule the next arrival
  Event next_arrival = new Event(arrival, Clock+IntArvTime);
  FutureEventList.enqueue( next_arrival );
  LastEventTime = Clock;
 }

 public static void ScheduleDeparture() {
  double ServiceTime;
  /* For Question 4 (g): To change the service distribution to exponential */
  // record the service time generated by the exponential distribution.
  //CalServTime = exponential2(stream, MeanServiceTime);
  
  
  // record the service time generated by the normal distribution.
  // CalServTime = normal(stream, MeanServiceTime, SIGMA);
  
  while ((CalServTime= exponential(stream, MeanServiceTime)) < 0 );
  Event depart = new Event(departure,Clock+CalServTime);
  FutureEventList.enqueue( depart );
  NumberInService = 1;
  QueueLength--;
 }

public static void ProcessDeparture(Event e) {
 Event finished = (Event) Customers.dequeue();
  if( QueueLength > 0 ) ScheduleDeparture();
  else NumberInService = 0;
  double response = (Clock - finished.get_time());
    
  // Calculate parameters for Warm-Up period 
  if (NumberOfDepartures > WarmQueueCust ){
	  SumResponseTime += response;
  }
  if(( response > 4.0 ) && (NumberOfDepartures > WarmQueueCust )){ 
	  LongService++; // record long service
  }
  if (NumberOfDepartures > WarmQueueCust ){
	  TotalBusy += (Clock - LastEventTime );  
  }

  NumberOfDepartures++;
  LastEventTime = Clock;
   if ((NumberOfDepartures == WarmQueueCust ) && (WarmQueueCust > 0)) 
  {
	  System.out.println("The trial test for Warm Cust " +WarmQueueCust );
	  
      WarmPeriodClock = Clock;
	  System.out.println("The trial test for Clock" +WarmPeriodClock );
  }
 }

public static void ReportGeneration() {
double RHO   = TotalBusy/(Clock-WarmPeriodClock);
double AVGR  = SumResponseTime/(TotalCustomers-WarmQueueCust);
double PC4   = ((double)LongService)/(TotalCustomers-WarmQueueCust);
double AvgInterArrivalTime = TotArvTime / (TotalCustomers-WarmQueueCust);
double AvgServiceTime = TotServTime / (TotalCustomers-WarmQueueCust);

System.out.println( "SINGLE SERVER QUEUE SIMULATION - GROCERY STORE CHECKOUT COUNTER ");
System.out.println( "\tMEAN INTERARRIVAL TIME                         " 
	+ MeanIntArvTime );
System.out.println( "\tMEAN SERVICE TIME                              " 
	+ MeanServiceTime );

System.out.println( "\tSTANDARD DEVIATION OF SERVICE TIMES            " + SIGMA );
System.out.println( "\tNUMBER OF CUSTOMERS SERVED                     " + TotalCustomers );
System.out.println(); 
System.out.println( "\tSERVER UTILIZATION                             " + RHO );
System.out.println( "\tMAXIMUM LINE LENGTH                            " + MaxQueueLength );
System.out.println( "\tAVERAGE RESPONSE TIME                          " + AVGR + "  MINUTES" );
System.out.println( "\tPROPORTION WHO SPEND FOUR "); 
System.out.println( "\t MINUTES OR MORE IN SYSTEM                     " + PC4 );
System.out.println( "\tSIMULATION RUNLENGTH                           " + Clock + " MINUTES" );
System.out.println("--------------------------------------------------------------");
System.out.println( "\tNUMBER OF DEPARTURES                           " + TotalCustomers );
System.out.println("\tNumber of warm up customers is:                 " + WarmQueueCust);
System.out.println("\tThe Duration of Warm-Up Clock is:                 " +WarmPeriodClock);
System.out.println("\tThe Seed Used for this Simuation is:            " + seed);
System.out.println( "\tAVERAGE RESPONSE TIME                          " + AVGR + "  MINUTES" );
System.out.println( "\tThe calculated  INTER-ARRIVAL TIME             " + AvgInterArrivalTime);
System.out.println( "\tThe calculated SERVICE TIME                    " + AvgServiceTime);
System.out.println("--------------------------------------------------------------");
}

public static double exponential(Random rng, double mean) {
 return -mean*Math.log( rng.nextDouble() );
}

public static double SaveNormal;
public static int  NumNormals = 0;
public static final double  PI = 3.1415927 ;


/* For Question 4 (g): To change the service distribution to exponential */
public static double exponential2(Random rng, double mean) {
 return -mean*Math.log( rng.nextDouble() );
}
/*
public static double normal(Random rng, double mean, double sigma) {
        double ReturnNormal;
        if(NumNormals == 0 ) {
          double r1 = rng.nextDouble();
          double r2 = rng.nextDouble();
          ReturnNormal = Math.sqrt(-2*Math.log(r1))*Math.cos(2*PI*r2);
          SaveNormal   = Math.sqrt(-2*Math.log(r1))*Math.sin(2*PI*r2);
          NumNormals = 1;
        } else {
          NumNormals = 0;
          ReturnNormal = SaveNormal;
        }
        return ReturnNormal*sigma + mean ;
 }
*/
}

